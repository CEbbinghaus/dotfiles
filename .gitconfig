[user]
	email = git@cebbinghaus.com
	name = CEbbinghaus
	signinkey = 82A3CD50A639B60F

#[commit]
#	gpgsign = true

[core]
	editor = vim
	filemode = false
	autocrlf = false
	whitespace = cr-at-eol
	longpaths = true

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	
[alias]
	lgb1 = !"git log master..$(git branch-name) --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"
	lgb2 = !"git log --graph --abbrev-commit --decorate  --first-parent $(git branch-name) --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'"
	lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	lg = !"git lg1"
	lgb = !"git lgb2"

	fixref = !"git gc --prune=now"

	# ammends all staged changes to the last commit
	am = !"git commit --amend --no-edit"
	
	# Get the current branch name (not so useful in itself, but used in
	# other aliases)
	branch-name = "!git rev-parse --abbrev-ref HEAD"
	# Push the current branch to the remote "origin", and set it to track
	# the upstream branch
	publish = "!git push -u origin $(git branch-name)"
	# Delete the remote version of the current branch
	unpublish = "!git push origin :$(git branch-name)"
	# Delete a branch and recreate it from master â€” useful if you have, say,
	# a development branch and a master branch and they could conceivably go
	# out of sync
	recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f"

	# Fire up your difftool (e.g. Kaleidescope) with all the changes that
	# are on the current branch.
	code-review = difftool origin/master...

	# Given a merge commit, find the span of commits that exist(ed) on that
	# branch. Again, not so useful in itself, but used by other aliases.
	merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

	# Find the commits that were introduced by a merge
	merge-log = "!git log `git merge-span .. $1`"
	# Show the changes that were introduced by a merge
	merge-diff = "!git diff `git merge-span ... $1`"
	# As above, but in your difftool
	merge-difftool = "!git difftool `git merge-span ... $1`"

	# Interactively rebase all the commits on the current branch
	rebase-branch = "!git rebase -i `git merge-base master HEAD`"

	# Unstage all new files
	unstagenew = "!sh -c 'git diff --name-status --cached | grep ^A | sed 's/^A[[:space:]]//g' | xargs -I {} git reset HEAD {}'"

	#
	# Working with files
	#

	# Unstage any files that have been added to the staging area
	unstage = reset HEAD
	# Show changes that have been staged
	diffc = diff --cached

	# Mark a file as "assume unchanged", which means that Git will treat it
	# as though there are no changes to it even if there are. Useful for
	# temporary changes to tracked files
	assume = update-index --assume-unchanged
	# Reverse the above
	unassume = update-index --no-assume-unchanged
	# Show the files that are currently assume-unchanged
	assumed = "!git ls-files -v | grep ^h | cut -c 3-"

	# Checkout our version of a file and add it
	ours = "!f() { git checkout --ours $@ && git add $@; }; f"
	# Checkout their version of a file and add it
	theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

	# Delete any branches that have been merged into master
	# See also: https://gist.github.com/robmiller/5133264
	delete-merged-branches = "!git co master && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	
	# Retrieve the root directory of the current git folder
	root = "rev-parse --show-toplevel"


	# Fuzzy Show remote Branches
	rb = "!git branch -r --format '%(refname:lstrip=2)'"

	# Fuzzy Delete Local branch
	fbd = "!git branch -D $(git branch | fzf -m --header '!WARNING! Branch Will be Deleted') | clear"
	# Fuzzy Pull branch from server
	frb = "!git checkout $(git branch  -r --format '%(refname:lstrip=3)' | fzf -m --header 'Select Remote Branch') | clear"
	# Fuzzy swap branch
	fb = "!git switch $(git branch | fzf -m --header 'Select Branch') | clear"
	# Fuzzy Merge branch
	fm = "!git merge $(git branch | fzf -m --header 'Select Branch to Merge') | clear"
	# Fuzzy Merge branch
	fr = "!git rebase $(git branch | fzf -m --header 'Select Branch to rebase onto') | clear"
	# Fuzzy Add files
	fa = "!git add $(git ls-files --modified --others --exclude-standard | fzf -m) | clear"
#[commit]
#	gpgsign = true
[pull]
	ff = only

[url "ssh://git@github.com/"]
	pushInsteadOf = https://github.com/
